(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{266:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"behavior-driven-development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#behavior-driven-development"}},[t._v("#")]),t._v(" Behavior Driven Development")]),t._v(" "),a("p",[t._v("Behavior Driven Development (BDD) is a popular software development methodology. BDD is considered an extension of TDD, and is greatly inspired by "),a("a",{attrs:{href:"http://agilemanifesto.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Agile"),a("OutboundLink")],1),t._v(" practices. The primary reason to choose BDD as your development process is to break down communication barriers between business and technical teams. BDD encourages the use of automated testing to verify all documented features of a project from the very beginning. This is why it is common to talk about BDD in the context of test frameworks (like CodeceptJS). The BDD approach, however, is about much more than testing - it is a common language for all team members to use during the development process.")]),t._v(" "),a("h2",{attrs:{id:"what-is-behavior-driven-development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-behavior-driven-development"}},[t._v("#")]),t._v(" What is Behavior Driven Development")]),t._v(" "),a("p",[t._v("BDD was introduced by "),a("a",{attrs:{href:"https://dannorth.net/introducing-bdd/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan North"),a("OutboundLink")],1),t._v(". He described it as:")]),t._v(" "),a("blockquote",[a("p",[t._v("outside-in, pull-based, multiple-stakeholder, multiple-scale, high-automation, agile methodology. It describes a cycle of interactions with well-defined outputs, resulting in the delivery of working, tested software that matters.")])]),t._v(" "),a("p",[t._v('BDD has its own evolution from the days it was born, started by replacing "test" to "should" in unit tests, and moving towards powerful tools like Cucumber and Behat, which made user stories (human readable text) to be executed as an acceptance test.')]),t._v(" "),a("p",[t._v("The idea of story BDD can be narrowed to:")]),t._v(" "),a("ul",[a("li",[t._v("describe features in a scenario with a formal text")]),t._v(" "),a("li",[t._v("use examples to make abstract things concrete")]),t._v(" "),a("li",[t._v("implement each step of a scenario for testing")]),t._v(" "),a("li",[t._v("write actual code implementing the feature")])]),t._v(" "),a("p",[t._v("By writing every feature in User Story format that is automatically executable as a test we ensure that: business, developers, QAs and managers are in the same boat.")]),t._v(" "),a("p",[t._v("BDD encourages exploration and debate in order to formalize the requirements and the features that needs to be implemented by requesting to write the User Stories in a way that everyone can understand.")]),t._v(" "),a("p",[t._v("By making tests to be a part of User Story, BDD allows non-technical personnel to write (or edit) Acceptance tests.")]),t._v(" "),a("p",[t._v("With this procedure we also ensure that everyone in a team knows what has been developed, what has not, what has been tested and what has not.")]),t._v(" "),a("h3",{attrs:{id:"ubiquitous-language"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ubiquitous-language"}},[t._v("#")]),t._v(" Ubiquitous Language")]),t._v(" "),a("p",[t._v("The ubiquitous language is always referred as "),a("em",[t._v("common")]),t._v(" language. That is it's main benefit. It is not a couple of our business specification's words, and not a couple of developer's technical terms. It is a common words and terms that can be understood by people for whom we are building the software and should be understood by developers. Establishing correct communication between this two groups people is vital for building successful project that will fit the domain and fulfill all business needs.")]),t._v(" "),a("p",[t._v("Each feature of a product should be born from a talk between")]),t._v(" "),a("ul",[a("li",[t._v("business (analysts, product owner)")]),t._v(" "),a("li",[t._v("developers")]),t._v(" "),a("li",[t._v("QAs")])]),t._v(" "),a("p",[t._v('which are known in BDD as "three amigos".')]),t._v(" "),a("p",[t._v("Such talks should produce written stories. There should be an actor that doing some things, the feature that should be fulfilled within the story and the result achieved.")]),t._v(" "),a("p",[t._v("We can try to write such simple story:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("As a customer I want to buy several products\nI put first product with $600 price to my cart\nAnd then another one with $1000 price\nWhen I go to checkout process\nI should see that total number of products I want to buy is 2\nAnd my order amount is $1600\n")])])]),a("p",[t._v("As we can see this simple story highlights core concepts that are called "),a("em",[t._v("contracts")]),t._v(". We should fulfill those contracts to model software correctly. But how we can verify that those contracts are being satisfied? "),a("a",{attrs:{href:"http://cucumber.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cucumber"),a("OutboundLink")],1),t._v(" introduced a special language for such stories called "),a("strong",[t._v("Gherkin")]),t._v(". Same story transformed to Gherkin will look like this:")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token feature"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Feature:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" checkout process")]),t._v("\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Scenario:")]),a("span",{pre:!0,attrs:{class:"token important"}})]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Given")]),t._v(" I have product with $600 price in my cart\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" I have product with $1000 price\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("When")]),t._v(" I go to checkout process\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Then")]),t._v(" I should see that total number of products is 2\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" my order amount is $1600\n")])])]),a("p",[a("strong",[t._v("CodeceptJS can execute this scenario step by step as an automated test")]),t._v(".\nEvery step in this scenario requires a code which defines it.")]),t._v(" "),a("h2",{attrs:{id:"gherkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gherkin"}},[t._v("#")]),t._v(" Gherkin")]),t._v(" "),a("p",[t._v("Let's learn some more about Gherkin format and then we will see how to execute it with CodeceptJS. We can enable Gherkin for current project by running "),a("code",[t._v("gherkin:init")]),t._v(" command on "),a("strong",[t._v("already initialized project")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npx codeceptjs gherkin:init\n")])])]),a("p",[t._v("It will add "),a("code",[t._v("gherkin")]),t._v(" section to the current config. It will also prepare directories for features and step definition. And it will create the first feature file for you.")]),t._v(" "),a("h3",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),a("p",[t._v("Whenever you start writing a story you are describing a specific feature of an application, with a set of scenarios and examples describing this feature. Let's open a feature file created by "),a("code",[t._v("gherkin:init")]),t._v(" command, which is "),a("code",[t._v("feature/basic.feature")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token feature"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Feature:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" Business rules")]),t._v("\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Scenario:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" do something")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Given")]),t._v(" I have a defined step\n")])])]),a("p",[t._v("This text should be rewritten to follow your buisness rules. Don't think about a web interface for a while.\nThink about how user interacts with your system and what goals they want to achieve. Then write interaction scenarios.")]),t._v(" "),a("h4",{attrs:{id:"scenarios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scenarios"}},[t._v("#")]),t._v(" Scenarios")]),t._v(" "),a("p",[t._v("Scenarios are live examples of feature usage. Inside a feature file it should be written inside a "),a("em",[t._v("Feature")]),t._v(" block. Each scenario should contain its title:")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token feature"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Feature:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" checkout")]),t._v("\n  In order to buy product\n  As a customer\n  I need to be able to checkout the selected products\n\n")]),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Scenario:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" order several products")])]),t._v("\n")])])]),a("p",[t._v("Scenarios are written in step-by-step manner using Given-When-Then approach. At start, scenario should describe its context with "),a("strong",[t._v("Given")]),t._v(" keyword:")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  Given I have product with $600 price in my cart\n  "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" I have product with $1000 price in my cart\n")])])]),a("p",[t._v("Here we also use word "),a("strong",[t._v("And")]),t._v(" to extend the Given and not to repeat it in each line.")]),t._v(" "),a("p",[t._v("This is how we described the initial conditions. Next, we perform some action. We use "),a("strong",[t._v("When")]),t._v(" keyword for it:")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  When I go to checkout process\n")])])]),a("p",[t._v("And in the end we are verifying our expectation using "),a("strong",[t._v("Then")]),t._v(" keyword. The action changed the initial given state, and produced some results. Let's check that those results are what we actually expect.")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  Then I should see that total number of products is 2\n  "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" my order amount is $1600\n")])])]),a("p",[t._v("This scenarios are nice as live documentation but they do not test anything yet. What we need next is to define how to run those steps.\nSteps can be defined by executing "),a("code",[t._v("gherkin:snippets")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("codeceptjs gherkin:snippets "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--feature"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("This will produce code templates for all undefined steps in the .feature files.\nBy default, it will scan all of the .feature files specified in the gherkin.features section of the config and produce code templates for all undefined steps. If the "),a("code",[t._v("--feature")]),t._v(" option is specified, it will scan the specified .feature file(s).\nThe stub definitions by default will be placed into the first file specified in the gherkin.steps section of the config. However, you may also use "),a("code",[t._v("--path")]),t._v(" to specify a specific file in which to place all undefined steps. This file must exist and be in the gherkin.steps array of the config.\nOur next step will be to define those steps and transforming feature-file into a valid test.")]),t._v(" "),a("h3",{attrs:{id:"step-definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-definitions"}},[t._v("#")]),t._v(" Step Definitions")]),t._v(" "),a("p",[t._v("Step definitions are placed in JavaScript file with Given/When/Then functions that map strings from feature file to functions:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use I and productPage via inject() function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" productPage "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you can provide RegEx to match corresponding steps")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Given")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/I have product with \\$(\\d+) price/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("amOnPage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  productPage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" price "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Add to cart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or a simple string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("When")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I go to checkout process'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Checkout'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parameters are passed in via Cucumber expressions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I should see that total number of products is {int}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("see")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.cart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my order amount is ${int}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslint-disable-line")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("see")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Total: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Steps can be either strings or regular expressions. Parameters from string are passed as function arguments. To define parameters in a string we use "),a("a",{attrs:{href:"https://docs.cucumber.io/cucumber/cucumber-expressions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cucumber expressions"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("To list all defined steps run "),a("code",[t._v("gherkin:steps")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("npx codeceptjs gherkin:steps\n")])])]),a("p",[t._v("To run tests and see step-by step output use "),a("code",[t._v("--steps")]),t._v(" optoin:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npx codeceptjs run --steps\n")])])]),a("p",[t._v("To see not only business steps but an actual performed steps use "),a("code",[t._v("--debug")]),t._v(" flag:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npx codeceptjs run --debug\n")])])]),a("h2",{attrs:{id:"advanced-gherkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-gherkin"}},[t._v("#")]),t._v(" Advanced Gherkin")]),t._v(" "),a("p",[t._v("Let's improve our BDD suite by using the advanced features of Gherkin language.")]),t._v(" "),a("h3",{attrs:{id:"background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[t._v("#")]),t._v(" Background")]),t._v(" "),a("p",[t._v("If a group of scenarios have the same initial steps, let's that for dashboard we need always need to be logged in as administrator. We can use "),a("em",[t._v("Background")]),t._v(" section to do the required preparations and not to repeat same steps across scenarios.")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token feature"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Feature:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" Dashboard")]),t._v("\n  In order to view current state of business\n  As an owner\n  I need to be able to see reports on dashboard\n\n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Background:")]),a("span",{pre:!0,attrs:{class:"token important"}})]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Given")]),t._v(" I am logged in as administrator\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" I open dashboard page\n")])])]),a("p",[t._v("Steps in background are defined the same way as in scenarios.")]),t._v(" "),a("h3",{attrs:{id:"tables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tables"}},[t._v("#")]),t._v(" Tables")]),t._v(" "),a("p",[t._v('Scenarios can become more descriptive when you represent repeating data as tables. Instead of writing several steps "I have product with :num1 $ price in my cart" we can have one step with multiple values in it.')]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  Given i have products in my cart"),a("span",{pre:!0,attrs:{class:"token table-head"}},[t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token th variable"}},[t._v(" name         ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token th variable"}},[t._v(" category    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token th variable"}},[t._v(" price  ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),a("span",{pre:!0,attrs:{class:"token table-body"}},[t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" Harry Potter ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" Books       ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 5      ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" iPhone 5     ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" Smartphones ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 1200   ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" Nuclear Bomb ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" Weapons     ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 100000 ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v("\n")])])]),a("p",[t._v("Tables is a recommended ways to pass arrays into test scenarios.\nInside a step definition data is stored in argument passed as "),a("code",[t._v("DataTable")]),t._v(" JavaScript object.\nYou can iterate on it like this:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Given")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I have products in my cart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslint-disable-line")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// skip a header of a table")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// go by row cells")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cells "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// take values")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" category "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("In case scenarios represent the same logic but differ on data, we can use "),a("em",[t._v("Scenario Outline")]),t._v(" to provide different examples for the same behavior. Scenario outline is just like a basic scenario with some values replaced with placeholders, which are filled from a table. Each set of values is executed as a different test.")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Scenario Outline:")]),a("span",{pre:!0,attrs:{class:"token important"}},[t._v(" order discount")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Given")]),t._v(" I have product with price "),a("span",{pre:!0,attrs:{class:"token outline variable"}},[t._v("<price>")]),t._v("$ in my cart\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("And")]),t._v(" discount for orders greater than $20 is 10 %\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("When")]),t._v(" I go to checkout\n    "),a("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("Then")]),t._v(" I should see overall price is "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token outline variable"}},[t._v("<total>")]),t._v('"')]),t._v(" $\n\n    "),a("span",{pre:!0,attrs:{class:"token scenario"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Examples:")]),a("span",{pre:!0,attrs:{class:"token important"}})]),a("span",{pre:!0,attrs:{class:"token table-head"}},[t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token th variable"}},[t._v(" price ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token th variable"}},[t._v(" total ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),a("span",{pre:!0,attrs:{class:"token table-body"}},[t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 10    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 10    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 20    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 20    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 21    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 18.9  ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 30    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 27    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 50    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token td string"}},[t._v(" 45    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v("\n")])])]),a("h3",{attrs:{id:"long-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#long-strings"}},[t._v("#")]),t._v(" Long Strings")]),t._v(" "),a("p",[t._v("Text values inside a scenarios can be set inside a "),a("code",[t._v('"""')]),t._v(" block:")]),t._v(" "),a("div",{staticClass:"language-gherkin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gherkin"}},[a("code",[t._v("  Then i see in file "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codecept.json"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token pystring string"}},[t._v('"""\n{\n  "output": "./output",\n  "helpers": {\n    "Puppeteer": {\n      "url": "http://localhost",\n      "restart": true,\n      "windowSize": "1600x1200"\n    }\n"""')]),t._v("\n")])])]),a("p",[t._v("This string can be accessed inside a "),a("code",[t._v("content")]),t._v(" property of a last argument:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Then i see in file {string}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file is a value of {string} from a title")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fileContent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fileContent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("should"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// text.content is a value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tags"}},[t._v("#")]),t._v(" Tags")]),t._v(" "),a("p",[t._v("Gherkin scenarios and features can contain tags marked with "),a("code",[t._v("@")]),t._v(". Tags are appended to feature titles so you can easily filter by them when running tests:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("codeceptjs run --grep "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@important"')]),t._v("\n")])])]),a("p",[t._v("Tag should be placed before "),a("em",[t._v("Scenario:")]),t._v(" or before "),a("em",[t._v("Feature:")]),t._v(" keyword. In the last case all scenarios of that feature will be added to corresponding group.")]),t._v(" "),a("h2",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("gherkin")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("features")]),t._v(" - path to feature files")]),t._v(" "),a("li",[a("code",[t._v("steps")]),t._v(" - array of files with step definitions")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gherkin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"features"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./features/*.feature"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"steps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./step_definitions/steps.js"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"before"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before"}},[t._v("#")]),t._v(" Before")]),t._v(" "),a("p",[t._v("You can set up some before hooks inside step definition files. Use "),a("code",[t._v("Before")]),t._v(" function to do that.\nThis function receives current test as a parameter, so you can apply additional configuration to it.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inside step_definitions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// perform your code")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("retries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// retry test 3 times")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("This can be used to keep state between steps:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inside step_definitions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Given")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'have a user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("have")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("When")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I open account page'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("amOnPage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("/user/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slug"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"after"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#after"}},[t._v("#")]),t._v(" After")]),t._v(" "),a("p",[t._v("Similarly to "),a("code",[t._v("Before")]),t._v(" you can use "),a("code",[t._v("After")]),t._v(" and "),a("code",[t._v("Fail")]),t._v(" inside a scenario. "),a("code",[t._v("Fail")]),t._v(" hook is activated on failure and receive two parameters: "),a("code",[t._v("test")]),t._v(" and current "),a("code",[t._v("error")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("After")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" someService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test didn't")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Failed with'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"tests-vs-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tests-vs-features"}},[t._v("#")]),t._v(" Tests vs Features")]),t._v(" "),a("p",[t._v("It is common to think that BDD scenario is equal to test. But it's actually not. Not every test should be described as a feature. Not every test is written to test real business value. For instance, regression tests or negative scenario tests are not bringing any value to business. Business analysts don't care about scenario reproducing bug #13, or what error message is displayed when user tries to enter wrong password on login screen. Writing all the tests inside a feature files creates informational overflow.")]),t._v(" "),a("p",[t._v("In CodeceptJS you can combine tests written in Gherkin format with classical acceptance tests. This way you can keep your feature files compact with minimal set of scenarios, and write regular tests to cover all cases. Please note, feature files will be executed before tests.")]),t._v(" "),a("p",[t._v("To run only features use "),a("code",[t._v("--features")]),t._v(" option:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("codeceptjs run --features\n")])])]),a("p",[t._v("You can run a specific feature file by its filename or by grepping by name or tag.")]),t._v(" "),a("p",[t._v("To run only tests without features use "),a("code",[t._v("--tests")]),t._v(" option:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("codeceptjs run --tests\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);